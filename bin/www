#!/usr/bin/env node
const { Server } = require('socket.io');
/**
 * Module dependencies.
 */
var express = require('express');
var app = require('../app');
var debug = require('debug')('node:server');
var http = require('http');
const path = require('path');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const io = new Server(server);




let usuarios = 0;

let username="";

app.use(express.static(path.join(__dirname, '../public/images')));

const rooms = {};

let connectedUsers = 0;
const users = {};

io.on('connection', (socket) => {
  let addedUser = false;

  socket.on('add user', (username) => {
    if (addedUser) return;

    socket.username = username;
    users[socket.id] = username;
    ++connectedUsers;
    addedUser = true;

    io.emit('updateUsers', Object.values(users));
  });

  socket.on('disconnect', () => {
    if (addedUser) {
        const disconnectedUser = users[socket.id]; 
        delete users[socket.id];
        --connectedUsers;

        io.emit('updateUsers', Object.values(users));
        io.emit('user disconnected', disconnectedUser);
    }
});
socket.on('joinRoom', (roomName) => {
  // Dejar la sala actual y unirse a la nueva sala
  if (socket.room) {
    socket.leave(socket.room);
  }
  socket.join(roomName);
  socket.room = roomName;

  // Crear la sala si no existe
  if (!rooms[roomName]) {
    rooms[roomName] = new Set();
  }
  rooms[roomName].add(socket.id);

  console.log(`Usuario ${socket.id} se ha unido a la sala ${roomName}`);
});

socket.on('mensaje', (mensaje) => {
  const username = users[socket.id];
  console.log(`${username} envi칩 un mensaje: ${mensaje}`);
  io.to(socket.room).emit('mensaje', { mensaje, emisor: username, emisorId: socket.id });
});

socket.on('imagen', (imagenData) => {
  const username = users[socket.id];
  console.log(`${username} envi칩 una imagen.`);
  io.emit('imagen', { imagenData, emisor: username, emisorId: socket.id });
});

socket.on('createRoom', (roomName) => {
  // Verificar si la sala ya existe
  if (!rooms[roomName]) {
    // Crear la sala y unirse a ella
    rooms[roomName] = new Set();
    rooms[roomName].add(socket.id);
    socket.join(roomName);
    socket.room = roomName;
    console.log(`Usuario ${socket.id} ha creado la sala ${roomName}`);
  } else {
    // La sala ya existe, emitir un evento de error al cliente
    socket.emit('roomCreationError', 'La sala ya existe, elige otro nombre.');
  }
});

socket.on('mensajeEnSala', (datos) => {
 datos={
  sala:"nombreSala",
  nick:"miNick",
  msg:"mensaje"
 }
  socket.to(datos.sala).emit("mensajeEnSala", datos);
  
});

socket.on('escribiendo', () => {
  const username = users[socket.id];
  console.log(`${username} est치 escribiendo...`);
  console.log(`${socket.id} est치 escibiendo el userid...`);
  io.emit('escribiendo', { emisor: username, emisorId: socket.id });
});


socket.on('dejarEscribir', () => {
  io.emit('dejarEscribir', { emisorId: socket.id }); 
});
});
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
