#!/usr/bin/env node
const { Server } = require('socket.io');
/**
 * Module dependencies.
 */
var express = require('express');
var app = require('../app');
var debug = require('debug')('node:server');
var http = require('http');
const path = require('path');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const io = new Server(server);




let usuarios = 0;

app.use(express.static(path.join(__dirname, '../public/images')));

const rooms = {};

io.on('connection', (socket) => {
  console.log('Usuario conectado:', socket.id);

  socket.on('joinRoom', (roomName) => {
    // Dejar la sala actual y unirse a la nueva sala
    if (socket.room) {
      socket.leave(socket.room);
    }
    socket.join(roomName);
    socket.room = roomName;

    // Crear la sala si no existe
    if (!rooms[roomName]) {
      rooms[roomName] = new Set();
    }
    rooms[roomName].add(socket.id);

    console.log(`Usuario ${socket.id} se ha unido a la sala ${roomName}`);
  });

  socket.on('createRoom', (roomName) => {
    // Verificar si la sala ya existe
    if (!rooms[roomName]) {
      // Crear la sala y unirse a ella
      rooms[roomName] = new Set();
      rooms[roomName].add(socket.id);
      socket.join(roomName);
      socket.room = roomName;
      console.log(`Usuario ${socket.id} ha creado la sala ${roomName}`);
    } else {
      // La sala ya existe, emitir un evento de error al cliente
      socket.emit('roomCreationError', 'La sala ya existe, elige otro nombre.');
    }
  });

  socket.on('chatMessage', (data) => {
    console.log('Mensaje recibido:', data.message);
  
    // Verificar si el mensaje es un sticker o texto
    if (data.sticker) {
      // Emitir el sticker solo a los clientes dentro de la misma sala
      io.to(socket.room).emit('stickerMessage', { username: data.username, sticker: data.sticker });
    } else {
      // Emitir el mensaje de texto solo a los clientes dentro de la misma sala
      io.to(socket.room).emit('chatMessage', { username: data.username, message: data.message });
    }
  
    // Agregar el mensaje al historial de la sala
    if (!rooms[socket.room]) {
      rooms[socket.room] = [];
    }
    rooms[socket.room].push({ username: data.username, message: data.message, sticker: data.sticker });
  });

  socket.on('disconnect', () => {
    console.log('Usuario desconectado:', socket.id);

    // Remover al usuario de la sala al desconectar
    if (socket.room && rooms[socket.room]) {
      rooms[socket.room].delete(socket.id);
      if (rooms[socket.room].size === 0) {
        delete rooms[socket.room];
      }
    }
  });
});
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
